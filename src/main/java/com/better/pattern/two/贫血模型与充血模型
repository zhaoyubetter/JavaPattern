=》贫血模型式的开发：
面向过程式
平时的开发，大部分都是 SQL 驱动（SQL-Driven）的开发模式。
我们接到一个后端接口的开发需求的时候，就去看接口需要的数据对应到数据库中，
需要哪张表或者哪几张表，然后思考如何编写 SQL 语句来获取数据。
之后就是定义 Entity、BO、VO，
然后模板式地往对应的 Repository、Service、Controller 类中添加代码。

业务逻辑基本都在一个大的 SQL 中，而 Service 层做的事情却很少，而 SQL 的复用性很差；

==》如果使用充血模型开发：
面向对象式
事先理清楚所有的业务，定义领域模型所包含的属性和方法。
领域模型相当于可复用的业务中间层。
新功能需求的开发，都基于之前定义好的这些领域模型来完成。

越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。
而基于充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，
所以它更加适合这种复杂系统的开发；

https://time.geekbang.org/column/article/169631